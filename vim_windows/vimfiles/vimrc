" Specify a directory for plugins
call plug#begin('~/vimfiles/plugged')
Plug 'ctrlpvim/ctrlp.vim'
Plug 'nlknguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-unimpaired'
call plug#end()

set expandtab

set incsearch
set list
"set listchars=tab:â–¸\ ,eol:Â¬
set listchars=tab:–¸\ ,eol:¬
set nohlsearch
set nojoinspaces
set number relativenumber
set laststatus=2
set shiftwidth=4
set smartcase
set ruler
set smartindent
set hidden
set tabstop=4
set timeoutlen=600
set scrolloff=2
set visualbell t_vb=".
" Ignore case in searches
set ignorecase
"look for ctags file in current dir or recursively upward (semicolon)
set tags+=./tags;,tags
"Use set guifont=* to try a font, then set guifont? to find string to use
"below... 
"set guifont=Source_Code_Pro:h11:cANSI:qDRAFT
set guifont=JetBrains_Mono:h12:cANSI:qDRAFT
set guioptions -=T
set guioptions -=m
set nowrap
set path+=**
set wildmenu
" Temporarily disable hjkl for training
"noremap h <NOP>
"noremap j <NOP>
"noremap k <NOP>
"noremap l <NOP>
" Setup options for hard-wrapping test with gq{motion} command
set formatoptions=tcq
inoremap kj <Esc>
nnoremap gb :ls<CR>:b<Space>
" Create a new Note file
command! -nargs=1 Nn call NewNote("<args>")
fun! NewNote(args)
    let l:name = strftime("%Y_%m_%d_%H%M%S") . "_" . tolower(substitute(a:args, " ", "_", "g")) . ".md"
    let l:file = $NOTES . "/" . l:name 
    exe "e!" . l:file
    put ='#References'
    put ='Prev:'
    put ='Next:'
    put ='Keywords:'
    put ='#'.a:args
endfun
nnoremap <leader>nn :Nn
" New note with link inserted in current open note
command! -nargs=1 Nln call NewLinkedNote("<args>")
fun! NewLinkedNote(args)
    let l:name = strftime("%Y_%m_%d_%H%M%S") . "_" . tolower(substitute(a:args, " ", "_", "g")) . ".md"
    let l:file = $NOTES . "/". l:name 
    put = l:name
    exe "e!" . l:file
    put ='#References'
    put ='Prev:'
    put ='Next:'
    put ='Keywords:'
    put ='#'.a:args
endfun
" Use sys clipboard as default (must use vimx after yum install vim-xll)
set clipboard=unnamed
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**
" Display all matching files when we tab complete
set wildmenu

autocmd InsertEnter * setlocal nocursorline
autocmd VimEnter,InsertLeave * setlocal cursorline
"setup solarized theme
syntax enable
set background=light
colorscheme papercolor 
" Enable filetype plugins
filetype plugin on
" Enable md syntax formatting for .md file extension
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
autocmd FileType markdown setlocal textwidth=69
autocmd FileType markdown setlocal colorcolumn=70
" Put vertical line a 80
set colorcolumn=80
" Enable indent folding for python files
autocmd FileType python setlocal foldmethod=indent
" Without next, blank lines would start new fold...
autocmd FileType python setlocal foldignore=
autocmd FileType python setlocal foldnestmax=2
" PEP8 indents if python
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal textwidth=79
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal autoindent
autocmd FileType python setlocal fileformat=unix

highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
autocmd FileType python set makeprg=pylint\ --reports=n\ --ignored-modules=pandas\ --output-format=parseable\ %:p
autocmd FileType pythone set errorformat=%f:%l:\ %m
" Remap leader to space
let mapleader="\<Space>"
" Command to build Ctags database: file.txt should be relative to project root and 
" one path (no leading slashes) per line to exclude
" nnoremap <leader>t :!ctags -R --exclude=@<file.txt> <project_root_path> <CR>

"Setup C-n autocomplete to not search include files by default as this can be SLOW
"set complete=.,w,b,u,t

"Quick command ":Fblah term" to search only search specific folders and put results in quickfix list
"func! SearchBlah(term)
"    let s:command = "grep -r --include \*.h --include \*.cpp --include \*.c . a:term . " <PROJECT_FOLDER_PATH>
"    execute(s:command)
"endfunc
"command! -nargs=1 Fblah call SearchBlah(<f-args>)

"Map command to run clang-format
"map <C-K> :pyf <path-to-this-file>/clang-format.py<cr>
"imap <C-K> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>
"
nnoremap <leader>ni :e $NOTES/index.md<CR>:cd $NOTES<CR>
" Make Ctrlp use ripgrep
if executable('rg')
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_user_caching = 0
    set grepprg=rg\ --color=never\ --vimgrep
" only searches markdown as well using ripgrep
" Thus depends on grepprg being set to rg
"command! -nargs=1 Ngrep grep "<args>" -g "*.md" "c:\users\phil\Google Drive\notes"
command! -nargs=1 Ngrep grep "<args>" -g "*.md" "c:\users\pwright\gdrive\notes"
nnoremap <leader>fn :Ngrep
command! Vlist botright vertical copen | vertical resize 50
nnoremap <leader>v :Vlist<CR>
" CtrlP function for inserting a markdown link with Ctrl-X
function! CtrlPOpenFunc(action, line)
   if a:action =~ '^h$'    
      " User pressed <c-x>
      " Get the filename
      let filename = fnameescape(fnamemodify(a:line, ':t'))
	  let filename_wo_timestamp = fnameescape(fnamemodify(a:line, ':t:s/\d+-//'))

      " Close CtrlP
      call ctrlp#exit()
      call ctrlp#mrufiles#add(filename)

      " Insert the markdown link to the file in the current buffer
	  let mdlink = "[ ".filename_wo_timestamp." ]( ".filename." )"
      put=mdlink
  else    
      " Use CtrlP's default file opening function
      call call('ctrlp#acceptfile', [a:action, a:line])
  endif
endfunction
" turn off caching so new files show up without having to do a cache refresh
g:ctrlp_use_caching = 0
" Register our custom Ctrl-P open function with the plugin
let g:ctrlp_open_func = { 
         \ 'files': 'CtrlPOpenFunc',
         \ 'mru files': 'CtrlPOpenFunc' 
         \ }
" Generate ctags
nnoremap <leader>tt :!ctags -R . <CR>
" Binding for searching tags ("search tag")
nnoremap <leader>st :CtrlPTag<CR>
endif
